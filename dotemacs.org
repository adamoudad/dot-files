* About
  This is my emacs config file.
  
  Writing it in a .org file makes it easier to organize, and gives me a +20% bonus in coolness.
  Here is a useful link : [[http://thewanderingcoder.com/2015/02/literate-emacs-configuration/][Literate Emacs Configuration]]
  
  If you want to use it, just open it in emacs and do ~C-c C-v t~. This will export (/tangle/)) all the code blocks of this file in your =~/.emacs.d/= .
  
  Pay attention to some additional things to do, like for python ([[#python]]), you will need python packages that can be installed via ~pip~.
  Make sure the following directories are existing
  - ~~/Tests~, required to save a bash script running a dockerized python shell
* Packages
** Package repositories
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/package-config.el
   (require 'package)
   (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
   (add-to-list 'package-archives '("elpy" . "http://jorgenschaefer.github.io/packages/"))
   #+END_SRC
** Default packages
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/package-config.el
     (defvar adam/packages '(ox-reveal auctex markdown-mode ;; ledger-mode
     elpy htmlize edit-server yaml-mode ein org-ref magit
     easy-jekyll
     cider slime all-the-icons-dired inf-ruby
     rainbow-delimiters langtool solidity-mode
     lsp-mode lsp-ui flycheck company lsp-treemacs helm-lsp dap-mode
     lsp-haskell
     ) "Default packages")
   #+END_SRC
** Install packages
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/package-config.el
   (defun adam/packages-installed-p ()
     (cl-every 'package-installed-p adam/packages))
   (unless (adam/packages-installed-p)
     (message "%s" "Refreshing package database...")
     (package-refresh-contents)
     (dolist (pkg adam/packages)
        (when (not (package-installed-p pkg))
          (package-install pkg))))
   #+END_SRC
* COMMENT Theme
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/theme-config.el
;; (load-theme 'material t)
;; My old theme
;; (custom-set-variables
;;  '(ansi-color-faces-vector
;;    [default default default italic underline success warning error])
;;  '(custom-enabled-themes (quote (tango-dark))))
;; (custom-set-faces)
;; (set-language-environment "UTF-8")

;; (setq inhibit-startup-message t)
;; (column-number-mode t)
;; (display-time-mode t)
(menu-bar-mode -1)
(tool-bar-mode -1)
;; (setq-default display-line-numbers 'relative)
;; (add-hook 'org-mode-hook (lambda () (setq-local display-line-numbers nil)))
(scroll-bar-mode -1)
;; (global-hl-line-mode t) ;; highlight current line
;; (setq-default frame-title-format '("%f [%m]")) ;; Display the file path and mode of the current buffer as frame title

  #+END_SRC
  Fonts [fn:fonts]
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/theme-config.el
;; (when (window-system)
;;   (set-frame-font "Fira Code"))
;; (custom-theme-set-faces
;;  'user
;;  '(variable-pitch ((t (:family "ETBembo" :height 120 :weight thin))))
;;  '(fixed-pitch ((t ( :family "Fira Code Retina" :height 100)))))
;; (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
;;                ;; (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
;;                ;; (36 . ".\\(?:>\\)")
;;                ;; (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
;;                ;; (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
;;                ;; (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
;;                ;; (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
;;                ;; (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
;;                ;; (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
;;                ;; (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
;;                ;; (48 . ".\\(?:x[a-zA-Z]\\)")
;;                ;; (58 . ".\\(?:::\\|[:=]\\)")
;;                ;; (59 . ".\\(?:;;\\|;\\)")
;;                ;; (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
;;                ;; (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
;;                ;; (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
;;                ;; (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
;;                ;; (91 . ".\\(?:]\\)")
;;                ;; (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
;;                ;; (94 . ".\\(?:=\\)")
;;                ;; (119 . ".\\(?:ww\\)")
;;                ;; (123 . ".\\(?:-\\)")
;;                (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
;;                (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
;;                )
;;              ))
  ;; (dolist (char-regexp alist)
  ;;   (set-char-table-range composition-function-table (car char-regexp)
  ;;                         `([,(cdr char-regexp) 0 font-shape-gstring]))))

  #+END_SRC
* COMMENT Display settings
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/display-config.el
  :END:
  - Open new frames instead of new windows
    #+BEGIN_SRC elisp
;; (setq display-buffer-alist
;;       '(("shell.*" (display-buffer-same-window) ())
;; 	("completions.*" (display-buffer-same-window) ())
;; 	("python.*" (display-buffer-reuse-window
;;         display-buffer-pop-up-frame)
;;          (reusable-frames . t))
;; 	("magit.*" (display-buffer-reuse-window
;;         display-buffer-pop-up-frame)
;;          (reusable-frames . t))
;; 	;; Reuse might be useful in some cases...
;;         ;; (".*" (display-buffer-reuse-window
;;         ;;        display-buffer-same-window
;;         ;;        display-buffer-pop-up-frame)
;;         ;;  (reusable-frames . t))
;; 	))
    #+END_SRC

* Magit
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/magit-conf.el
  :END:
  Add keybinding for ~magit-status~.
  There is a keybinding in ido-mode also but[fn:6] it seems not to work.
  #+BEGIN_SRC elisp
  (global-set-key (kbd "C-x g") 'magit-status)
  ;; (define-key ido-common-completion-map
  ;; (kbd \"C-x g\") 'ido-enter-magit-status)
  #+END_SRC
* Window moves
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/windmove-config.el
  (global-set-key (kbd "C-x <up>") 'windmove-up)
  (global-set-key (kbd "C-x <down>") 'windmove-down)
  (global-set-key (kbd "C-x <right>") 'windmove-right)
  (global-set-key (kbd "C-x <left>") 'windmove-left)
  #+END_SRC
  - Winner mode
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/windmove-config.el
    (winner-mode 1)
    #+END_SRC
* Edit settings
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/edit-config.el
  :END:
  - Consider sentence end by one period followed by one blank space (instead of double blank space by default)
    #+BEGIN_SRC elisp
    (setq sentence-end-double-space nil)
    #+END_SRC
  - Backward transpose
    #+BEGIN_SRC  emacs-lisp
      (global-set-key (kbd "C-S-t")
		      (lambda () (interactive)
			(transpose-chars -1)))
      ;; Sadly this one does not work...
      ;; (global-set-key (kbd "M-S-t")
      ;; 		(lambda () (interactive)
      ;; 		  (transpose-words -1)))
    #+END_SRC
  - Auto-paired characters
    #+BEGIN_SRC emacs-lisp
(show-paren-mode)
(electric-pair-mode 1)
(setq show-paren-mode 'expression)
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    #+END_SRC
  - Replace annoying /beep/ sound by visual bell
    #+BEGIN_SRC emacs-lisp
      (setq visible-bell 1)    
    #+END_SRC
  - Ido mode. Setting ~ido-auto-merge-work-directories-length~ to -1 disables this annoying auto-merge thing whenever I type something. Search and merge can still be triggered when typing M-s.
    #+BEGIN_SRC emacs-lisp
      (setq ido-enable-flex-matching t)
      (setq ido-everywhere t)
      (ido-mode 1)
      (setq ido-auto-merge-work-directories-length -1)
    #+END_SRC
  - Edit server for Firefox edit with emacs
    #+BEGIN_SRC emacs-lisp
    (require 'edit-server)
    (edit-server-start)
    #+END_SRC
* Grammar checking
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/edit-config.el
  :END:
  Open source spell checker. You will need the package =language-tool= installed on your system. The following configuration works for Archlinux.
  #+BEGIN_SRC elisp 
    (setq langtool-java-classpath
	  "/usr/share/languagetool:/usr/share/java/languagetool/*")
    (require 'langtool)
    (setq langtool-default-language "en-US")
  #+END_SRC
  Common commands are ~langtool-check~ ~langtool-correct-buffer~. Use =C-u M-x langtool-check= to check in different language.
  
  
  Another nice package is =ispell=. It has the advantage over =language-tool= to understand LaTeX syntax and grammar check .tex files well. It comes bundled with Emacs and uses =aspell= word dictionaries, so you will need to ~pacman -S aspell-en aspell-fr~ to install the French and English word dictionaries as an example. Change dictionary is made via ~ispell-change-dictionary~.[fn:4]
* Orgmode
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/orgmode-config.el
  :END:
  - Global key bindings
    #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
    #+END_SRC
  - Beautify ellipsis symbol
    #+BEGIN_SRC emacs-lisp
    (setq org-ellipsis "⤵")
    #+END_SRC
  - Ajouter date lors de la l'achèvement d'une tâche
    #+BEGIN_SRC emacs-lisp
    (setq org-log-done 'time)
    #+END_SRC
  - Ajouter export avec reveal.js et beamer
    #+BEGIN_SRC emacs-lisp
    (require 'ox-reveal)
    (require 'ox-beamer)
    (require 'ox-md)
    #+END_SRC
  - Export with broken links
    #+begin_src elisp
(setq org-export-with-broken-links t)
    #+end_src
  - Line Wrapping même dans orgmode
    #+BEGIN_SRC emacs-lisp
    (setq org-startup-truncated nil)
    #+END_SRC
  - TODO states
    #+BEGIN_SRC emacs-lisp
    (setq org-todo-keywords
    '((sequence "TODO(t)" "|" "DONE(d)")
    (sequence "|" "CANCELED(c)")))
    #+END_SRC
    - Use latexmk for latex export. ~-shell-escape~ option is required for =minted= package, though it is not very safe
	#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/orgmode-config.el
    (setq org-latex-pdf-process '("%latex -interaction nonstopmode -shell-escape -output-directory=%o %f" "bibtex %b" "%latex -interaction nonstopmode -shell-escape -output-directory=%o %f" "%latex -interaction nonstopmode -shell-escape -output-directory=%o %f"))
    ;; this command breaks reference (setq org-latex-pdf-process (list "latexmk -pdf -shell-escape %f"))
    ;; Add -interaction nonstopmode -output-directory %o %f
	#+END_SRC
  - Org-babel evaluation languages
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((dot . t)))
    #+END_SRC
  - Preserve indentation of source blocks, else python code is messed up
    #+BEGIN_SRC elisp
    (setq org-src-preserve-indentation t)
    #+END_SRC
  - Speed keys
    #+BEGIN_SRC elisp
    (setq org-use-speed-commands t)
    #+END_SRC
  - Use minted package for listings in Latex. You need to install pygments (python package)
    #+BEGIN_SRC elisp
      (setq org-latex-listings 'minted
	    org-latex-packages-alist '(("" "minted")))
      ;; (add-to-list 'org-latex-packages-alist '("newflot" "minted"))
    #+END_SRC
  - For fixing bugs related to minted especially, activate buffer-local variable bindings.
    #+begin_src elisp
(setq org-export-allow-bind-keywords t)
;; To disable minted add in header of an org file
;; #+BIND: org-latex-listings nil
    #+end_src
  - Org-ref
    #+BEGIN_SRC emacs-lisp
    (require 'org-ref)
    #+END_SRC
  - Size of preview latex fragments
    #+BEGIN_SRC emacs-lisp
      (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))
    #+END_SRC
    - Customizations[fn:3], hide emphasis markup, org-bullets
      #+BEGIN_SRC emacs-lisp
      (setq org-hide-emphasis-markers t)
      (add-hook 'org-mode-hook 'org-bullets-mode)
      (add-hook 'org-mode-hook 'visual-line-mode)
      #+END_SRC
    - Activate
      #+BEGIN_SRC emacs-lisp
      (setq org-default-notes-file (concat org-directory "~/Notes/notes.org"))
      #+END_SRC
    - Turn off actual size for inline images
      #+BEGIN_SRC emacs-lisp
      (setq org-image-actual-width nil)
      #+END_SRC
    - Custom structure templates
      #+begin_src elisp
(add-to-list 'org-structure-template-alist '("abs" . "abstract")  )
      #+end_src
** Modules
   Since orgmode 9.2, this is needed for oldstyle template behavior, with completion for "<s" for example.[fn:8]
   #+begin_src emacs-lisp
   (add-to-list 'org-modules 'org-tempo t)
   #+end_src
** LaTeX
   Custom classes latex
   #+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
	     '("keiothesis" "\\documentclass{keiothesis}"
	       ;; ("\\part{%s}" . "\\part*{%s}")
	       ("\\chapter{%s}" . "\\chapter*{%s}")
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
	     )
(add-to-list 'org-latex-classes
	     '("moderncv" "\\documentclass{moderncv}")
	     )
;; Lettre class is buggy still https://zestedesavoir.com/tutoriels/508/ecrire-des-lettres-en-latex/
(add-to-list 'org-latex-classes
	     '("lettre"
	       "\\documentclass{lettre}
      [DEFAULT-PACKAGES]
      [PACKAGES]
      [EXTRA]
      "
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


   #+END_SRC
** Fixes
   - Disable <> auto pairing in electric-pair-mode in orgmode to avoid conflicts with org-tempo[fn:7]
   #+begin_src emacs-lisp
(add-hook
 'org-mode-hook
 (lambda ()
   (setq-local electric-pair-inhibit-predicate
               `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))
   )
 )
   #+end_src
* Markdown
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/markdown-config.el
  :END:

  Live
  #+begin_src elisp
(defun markdown-html (buffer)
  (princ (with-current-buffer buffer
	   (format "<!DOCTYPE html><html><title>Impatient Markdown</title><xmp theme=\"united\" style=\"display:none;\"> %s  </xmp><script src=\"http://strapdownjs.com/v/0.2/strapdown.js\"></script></html>" (buffer-substring-no-properties (point-min) (point-max))))
	 (current-buffer)))
  #+end_src
  Start the http server with =M-x httpd-start= and enable =impatient-mode= in the current buffer with =M-x impatient-mode=.
  You can stop the server with =M-x httpd-stop= and disable =impatient-mode= in the current buffer with =M-x impatient-mode=.
* COMMENT Python with Elpy
  :PROPERTIES:
  :CUSTOM_ID: python
    :header-args: :tangle ~/.emacs.d/python-config.el
  :END:
  This is part is obsolete when using =lsp-mode=.
  
  Utiliser Elpy[fn:1]. Il faut installer les paquets python suivants.
  - jedi :: Autocompletion et analyse statique
  - flake8 :: Vérification du code
  - importmagic :: Imports automatiques
  - autopep8 :: Formattage automatique aux PEP8
  - yapf :: Formattage du code
  - rope :: refactoring
  - black :: code formatting
  #+BEGIN_SRC bash :tangle no
  source source .emacs.d/elpy/rpc-venv/bin/activate.fish
  python -m ensurepip
  python -m ensurepip --upgrade
  pip install jedi flake8 importmagic autopep8 rope yapf black
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
  (elpy-enable)
  #+END_SRC
  - Virtual environement setup
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/python-config.el
    (setenv "WORKON_HOME" "~/.pyvenv/")
    #+END_SRC
  - Docker python shell. ~docker pull ufoym/deepo~ is necessary beforehand
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/python-config.el
(define-key elpy-mode-map (kbd "C-c C-S-c") 'docker-elpy-shell-send-region-or-buffer)

(setq docker-shell-interpreter (expand-file-name "~/Tests/docker-python-shell.sh"))
(setq default-shell-interpreter "python")

(defun docker-elpy-shell-send-region-or-buffer ()
  (interactive)
  (let ((temp-python-shell-interpreter python-shell-interpreter))
    (setq python-shell-interpreter docker-shell-interpreter)
    (elpy-shell-send-region-or-buffer)
    (setq python-shell-interpreter default-shell-interpreter)
    ))
    #+END_SRC
    #+BEGIN_SRC yaml :tangle ~/Tests/docker-compose.yml
version: '2.3'
services:
  python:
    image: ufoym/deepo
    runtime: nvidia
    volumes:
      - '/tmp:/tmp'             # https://stackoverflow.com/questions/43194627/how-to-connect-emacs-elpy-in-buffer-python-interpreter-to-docker-container
      - '.:/code'
    command: python3
    #+END_SRC
    This needs a change in file permission ~chmod u+x ~/Tests/docker-python-shell.sh~
    #+BEGIN_SRC bash :tangle ~/Tests/docker-python-shell.sh :tangle-mode (identity #o744)
#!/bin/bash
# cd ~/Tests/
# docker-compose run python python3
docker run -it -v /tmp:/tmp -v $(pwd):/code ufoym/deepo python3
    #+END_SRC
* Language Server Protocol
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/lsp-config.el
  :END:
  - For python run ~pip install 'python-lsp-server[all]'~  in a terminal to install the python language server.
  - For haskell, run ~pacman -S haskell-language-server~. Then configure the variable ~lsp-haskell-server-path~ (TODO:how?)
  - For Go, run ~go install golang.org/x/tools/gopls@latest~ and make sure the $PATH is updated to the go binaries of ~go env~  (TODO: https://github.com/golang/tools/blob/master/gopls/doc/emacs.md)
  #+BEGIN_SRC emacs-lisp
(setq lsp-keymap-prefix "s-q")		;default was super-l
(require 'lsp-mode)

(add-hook 'python-mode-hook #'lsp-deferred)

(require 'lsp)
(require 'lsp-haskell)
;; Hooks so haskell and literate haskell major modes trigger LSP setup
(add-hook 'haskell-mode-hook #'lsp)
(add-hook 'haskell-literate-mode-hook #'lsp)

(add-hook 'go-mode-hook #'lsp-deferred)
;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
  #+END_SRC

* Dired
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/dired-config.el
  :END:
  - Move to trash
    #+BEGIN_SRC emacs-lisp
    (setq delete-by-moving-to-trash t)
    #+END_SRC
  - Human-readable size with ~-h~ and group directories first
    #+BEGIN_SRC elisp
      (setq dired-listing-switches "-alh --group-directories-first")
    #+END_SRC
  - Nice icons
    #+BEGIN_SRC elisp
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
    #+END_SRC
    Fix no refresh when dired remove or adds an entry after renaming, creating folder, etc.[fn:5]
    #+BEGIN_SRC elisp
    (advice-add 'dired-add-entry :around #'all-the-icons-dired--refresh-advice)
    (advice-add 'dired-remove-entry :around #'all-the-icons-dired--refresh-advice)
    #+END_SRC
  - Omit uninteresting files
    #+BEGIN_SRC elisp
    (require 'dired-x)
    (setq-default dired-omit-files-p t) ; Buffer-local variable
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
    #+END_SRC
* Docview
  - Auto revert files in Docview
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/docview-config.el
    (add-hook 'doc-view-mode-hook 'auto-revert-mode)
    #+END_SRC
* Executables path
  - Add ruby gem (easy-jekyll) to ~exec-path~
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/path-config.el
    (setq exec-path (append exec-path '("/home/adam/.gem/ruby/2.6.0/bin")))
    #+END_SRC
* Blog
  - Easy-hugo configuration
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/path-config.el
    (setq easy-hugo-basedir "~/Personal/research-log/")
    #+END_SRC
* IRC
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/irc-config.el
  :END:
  Define a nice command ~start-irc~ to connect to relevant IRC channels. Also use the ~notifications~ module to get notified of new messages.
  #+begin_src elisp
(setq erc-modules '(pcomplete netsplit fill button match track completion readonly networks ring autojoin noncommands irccontrols move-to-prompt stamp menu list notifications))
;; (erc-update-modules) Must be run manually it seems... because this fails at startup
(setq erc-autojoin-channels-alist '(("libera" "#orgmode" "#emacs")))
(defun start-irc ()
  "Automatically connect to IRC channels"
  (interactive)
  (erc-tls :server "irc.libera.chat" :port 6697 :nick "adam"))
  #+end_src
* LISP and Scheme
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/slime-config.el
  :END:
  Superior LISP Interaction Mode, Enhanced. You will need to install =sbcl= package first.
  - Setup
    #+BEGIN_SRC elisp
      (slime-setup '(slime-fancy slime-quicklisp slime-asdf))
      (setq inferior-lisp-program "sbcl")
    #+END_SRC
  - Run SLIME with ~M-x slime~


  Use guile as Scheme interpreter
  #+BEGIN_SRC elisp
  (setq scheme-program-name "guile")
  #+END_SRC
* Skeletons
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/skeletons-config.el
  :END:
  Skeletons are used to define templates to insert in files.
  #+begin_src elisp
(define-skeleton skel-figure
  "Insert a figure in orgmode."
  nil
  > "#+CAPTION: " (skeleton-read "Figure caption: ") \n
  > "#+LABEL: " (skeleton-read "Figure label: " "fig:") \n
  > "#+ATTR_LATEX: " (skeleton-read "Latex attributes: " ":width 7cm") \n
  > @ _ )

(define-skeleton skel-math
  "Insert math fragment."
  nil
  > "\\[" \n
  > @ _ \n
  > "\\]")

(define-skeleton skel-cjk
  "Insert CJK packages for LaTeX in Orgmode."
  nil
  "#+LATEX_HEADER: \\AtBeginDocument{\\begin{CJK}{UTF8}{min}}" \n
  "#+LATEX_HEADER: \\AtEndDocument{\\end{CJK}}" \n
  @ _)

(define-skeleton skel-beamer
  "Insert CJK packages for LaTeX in Orgmode."
  nil
  "#+Title: " (skeleton-read "Title: ") \n
  "#+Subtitle: " (skeleton-read "Subtitle: ") \n
  "#+OPTIONS: " (skeleton-read "Options: " "H:2 ^:{} f:t toc:nil") \n
  "#+LATEX_CLASS: beamer" \n
  "#+LATEX_CLASS_OPTIONS: [9pt,aspectratio=1610,table]" \n
  "#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)" \n
  "#+BEAMER_THEME: CambridgeUS" \n
  "# Madrid" \n
  "#+BEAMER_COLOR_THEME: " \n
  "#+BEAMER_FONT_THEME:" \n
  "#+BEAMER_INNER_THEME:" \n
  "#+BEAMER_OUTER_THEME:" \n
  "#+BEAMER_HEADER: \\usepackage[backend=bibtex]{biblatex}" \n
  "#+BEAMER_HEADER: \\usepackage{booktabs}" \n
  "#+BEAMER_HEADER: \\addbibresource{$HOME/Bibliographies/bibliography}" \n
  "#+BEAMER_HEADER: \\graphicspath{{$HOME/Pictures/images/}}" \n
  "#+BEAMER_HEADER: \\usepackage{media9} " \n
  "#+BIBLIOGRAPHY: ~/Bibliographies/bibliography" \n
  "#+BIBLIOGRAPHY_STYLE: plain" \n
  "#+BEAMER_HEADER: \\AtBeginSection[]{\\begin{frame}<beamer>\\frametitle{Topic}\\tableofcontents[currentsection]\\end{frame}}" \n)

(define-skeleton skel-black-latex
  "Insert packages for outputting white on black LaTeX documents"
  nil
  "\\usepackage{xcolor}\\usepackage{pagecolor}\\pagecolor{black}\\color{white}\n")
  #+end_src
* Init
  The content of the init.el file will simply load all other .el files previously defined.
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
  (package-initialize)
  (load-file "~/.emacs.d/package-config.el")
  (load-file "~/.emacs.d/theme-config.el")
  (load-file "~/.emacs.d/display-config.el")
  (load-file "~/.emacs.d/edit-config.el")
  (load-file "~/.emacs.d/orgmode-config.el")
  (load-file "~/.emacs.d/markdown-config.el")
  (load-file "~/.emacs.d/windmove-config.el")
  ;; (load-file "~/.emacs.d/python-config.el")
  (load-file "~/.emacs.d/dired-config.el")
  (load-file "~/.emacs.d/docview-config.el")
  (load-file "~/.emacs.d/path-config.el")
  (load-file "~/.emacs.d/slime-config.el")
  (load-file "~/.emacs.d/magit-conf.el")
  (load-file "~/Git/tifinagh-transliterator/tifinagh.el")
  (load-file "~/.emacs.d/skeletons-config.el")
  (load-file "~/.emacs.d/irc-config.el")
  (load-file "~/.emacs.d/lsp-config.el")
  #+END_SRC
* More
  Dotemacs in orgmode
  - http://mescal.imag.fr/membres/arnaud.legrand/misc/init.php
  - https://www.emacswiki.org/emacs/OrgDotemacs
  - http://doc.norang.ca/org-mode.html
  - http://kychoi.org/blog/2014/07/09/Dotemacs-In-Org
    

  Updated list of great packages
  - https://github.com/emacs-tw/awesome-emacs
* Footnotes

[fn:8] https://github.com/syl20bnr/spacemacs/issues/12003#issuecomment-465686129 

[fn:7]https://www.topbug.net/blog/2016/09/29/emacs-disable-certain-pairs-for-electric-pair-mode/ 

[fn:6]https://magit.vc/manual/2.90.1/magit/Status-Buffer.html 

[fn:5] https://github.com/jtbm37/all-the-icons-dired/issues/34

[fn:4] https://joelkuiper.eu/spellcheck_emacs

[fn:3] https://zzamboni.org/post/beautifying-org-mode-in-emacs/

[fn:2] https://addons.mozilla.org/en-US/firefox/addon/edit-with-emacs1/?src=search

[fn:1] https://github.com/jorgenschaefer/elpy

[fn:fonts] http://www.xiangji.me/2015/07/13/a-few-of-my-org-mode-customizations/


  
