* About
  This is my emacs config file.
  
  Writing it in a .org file makes it easier to organize, and gives me a +20% bonus in coolness.
  Here is a useful link : [[http://thewanderingcoder.com/2015/02/literate-emacs-configuration/][Literate Emacs Configuration]]
  
  If you want to use it, just open it in emacs and do ~C-c C-v t~. This will export (/tangle/)) all the code blocks of this file in your =~/.emacs.d/= .
  
  Pay attention to some additional things to do, like for python ([[#python]]), you will need python packages that can be installed via ~pip~.
* Packages
** Package repositories
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/package-config.el
   (require 'package)
   (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
   (add-to-list 'package-archives '("elpy" . "http://jorgenschaefer.github.io/packages/"))
   #+END_SRC
** Default packages
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/package-config.el
     (defvar adam/packages '(ox-reveal auctex markdown-mode ;; ledger-mode
     elpy htmlize edit-server yaml-mode ein org-ref magit
     material-theme easy-jekyll easy-hugo org-bullets
     ) "Default packages")
   #+END_SRC
** Install packages
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/package-config.el
   (defun adam/packages-installed-p ()
     (cl-every 'package-installed-p adam/packages))
   (unless (adam/packages-installed-p)
     (message "%s" "Refreshing package database...")
     (package-refresh-contents)
     (dolist (pkg adam/packages)
        (when (not (package-installed-p pkg))
          (package-install pkg))))
   #+END_SRC
* Theme
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/theme-config.el
    (load-theme 'material t)
    ;; My old theme
    ;; (custom-set-variables
    ;;  '(ansi-color-faces-vector
    ;;    [default default default italic underline success warning error])
    ;;  '(custom-enabled-themes (quote (tango-dark))))
    ;; (custom-set-faces)
  #+END_SRC
  Fonts [fn:fonts]
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/theme-config.el
    '(variable-pitch ((t (:family "DejaVu Sans Mono" :height 160))))
    (defun set-buffer-variable-pitch ()
      (interactive)
      (variable-pitch-mode t)
      (setq line-spacing 2)
      (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
      ;; (set-face-attribute 'org-block-background nil :inherit 'fixed-pitch)
      )

    (add-hook 'org-mode-hook 'set-buffer-variable-pitch)
    (add-hook 'eww-mode-hook 'set-buffer-variable-pitch)
    (add-hook 'markdown-mode-hook 'set-buffer-variable-pitch)
    (add-hook 'Info-mode-hook 'set-buffer-variable-pitch)
  #+END_SRC
* Display settings
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/display-config.el
    ;; (set-language-environment "UTF-8")
    (setq inhibit-startup-message t)
    (column-number-mode t)
    (display-time-mode t)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    ;;(scroll-bar-mode -1)
    (global-hl-line-mode t) ;; highlight current line
    (when (version<= "26.0.50" emacs-version )
      (global-display-line-numbers-mode))
  #+END_SRC
* Window moves
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/windmove-config.el
  (global-set-key (kbd "C-x <up>") 'windmove-up)
  (global-set-key (kbd "C-x <down>") 'windmove-down)
  (global-set-key (kbd "C-x <right>") 'windmove-right)
  (global-set-key (kbd "C-x <left>") 'windmove-left)
  #+END_SRC
  - Winner mode
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/windmove-config.el
    (winner-mode 1)
    #+END_SRC
* Edit settings
  - Backward transpose
    #+BEGIN_SRC  emacs-lisp :tangle ~/.emacs.d/edit-config.el
      (global-set-key (kbd "C-S-t")
		      (lambda () (interactive)
			(transpose-chars -1)))
      ;; Sadly this one does not work...
      ;; (global-set-key (kbd "M-S-t")
      ;; 		(lambda () (interactive)
      ;; 		  (transpose-words -1)))
    #+END_SRC
  - Auto-paired characters
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/edit-config.el
      (show-paren-mode)
      (electric-pair-mode 1)
    #+END_SRC
  - Enable editing of textarea with Emacs thanks to the /Edit with Emacs/[fn:2] Firefox extension
  #+BEGIN_SRC  emacs-lisp :tangle ~/.emacs.d/firefox-config.el
  ;; (require 'edit-server)
  ;; (edit-server-start) ;; For starting the edit server (disabled)
  #+END_SRC
  - Emacs server, for continuing emacs session using ssh
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/edit-config.el
    (server-start)
    #+END_SRC
  - Replace annoying /beep/ sound by visual bell
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/edit-config.el
      (setq visible-bell 1)    
    #+END_SRC
  - Ido mode
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/edit-config.el
      (setq ido-enable-flex-matching t)
      (setq ido-everywhere t)
      (ido-mode 1)
    #+END_SRC
* Orgmode
  - Ajouter date lors de la l'achèvement d'une tâche
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/orgmode-config.el
    (setq org-log-done 'time)
    #+END_SRC
  - Ajouter export avec reveal.js et beamer
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/orgmode-config.el
    (require 'ox-reveal)
    (require 'ox-beamer)
    #+END_SRC
  - Line Wrapping même dans orgmode
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/orgmode-config.el
    (setq org-startup-truncated nil)
    #+END_SRC
  - TODO states
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/orgmode-config.el
    (setq org-todo-keywords
    '((sequence "TODO(t)" "|" "DONE(d)")
    (sequence "|" "CANCELED(c)")))
    #+END_SRC
    - Use latexmk for latex export. ~-shell-escape~ option is required for =minted= package, though it is not very safe
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/orgmode-config.el
      (setq org-latex-pdf-process (list "latexmk -pdf -shell-escape %f"))
      ;; Add -interaction nonstopmode -output-directory %o %f
    #+END_SRC
  - Org-babel evaluation languages
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/orgmode-config.el
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((dot . t)))
    #+END_SRC
  - Speed keys
    #+BEGIN_SRC elisp :tangle ~/.emacs.d/orgmode-config.el 
    (setq org-use-speed-commands t)
    #+END_SRC
  - Use minted package for listings in Latex. You need to install pygmentize (python package)
    #+BEGIN_SRC elisp :tangle ~/.emacs.d/orgmode-config.el 
      (setq org-latex-listings 'minted
	    org-latex-packages-alist '(("" "minted")))
    #+END_SRC
  - Org-ref
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/orgmode-config.el
    (require 'org-ref)
    #+END_SRC
  - Size of preview latex fragments
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/orgmode-config.el
      (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))
    #+END_SRC
    - Customizations[fn:3], hide emphasis markup, org-bullets
      #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/orgmode-config.el
      (setq org-hide-emphasis-markers t)
      (add-hook 'org-mode-hook 'org-bullets-mode)
      (add-hook 'org-mode-hook 'visual-line-mode)
      #+END_SRC
    - Activate
      #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/orgmode-config.el
      (setq org-default-notes-file (concat org-directory "~/Notes/todo.org"))
      #+END_SRC
    - Turn off actual size for inline images
      #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/orgmode-config.el
      (setq org-image-actual-width nil)
      #+END_SRC
# ;; Fichier de configuration géré par customize
# ;; (setq custom-file "~/.emacs-custom.el")
# ;; ;; (setq custom-file "~/.emacs.d/ob-plantuml.el")
# ;; (load custom-file)

# ;; ;; Chargement du mode Ino
# ;; (autoload 'arduino-mode "arduino-mode" "Arduino editing mode." t)
# ;; (add-to-list 'auto-mode-alist '("\.ino$" . arduino-mode))

# ;; ;; Chargement du mode AucTex
# ;; (load "auctex.el" nil t t)

# ;; Chargement du mode PHP
# ;; (autoload 'php-mode "php-mode" "Major mode for editing php code." t)
# ;; (add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
# ;; (add-to-list 'auto-mode-alist '("\\.inc$" . php-mode))
# ;; Instructions given after update (yaourt -Syua)
# ;; (autoload 'php-mode "php-mode.el" "Php mode." t)
# ;; (setq auto-mode-alist (append '(("/.*\.php[345]?\'" . php-mode)) auto-mode-alist))

# ;; Affichage
# ;;(menu-bar-mode -1) enlever barre de menu
# ;;(tool-bar-mode -1) envelever barre d'outils
# ;;(scroll-bar-mode -1) enlever la barre de défilement

# ;;(setq truncate-partial-width-windows nil) pour les probleme de troncature lors du split vertical en mode plein écran
# ;;(setq ring-bell-function 'ignore) pour désactiver la sonnette
# p
# ;; Raccourcis
# ;;(global-set-key (kbd "C-c h") 'replace-string) placer une chaine depuis un buffer
# ;;(global-set-key (kbd "C-c j") 'replace-regexp) pareil, mais avec les regexp
# ;; (global-set-key (kbd "C-c o") 'bury-buffer)
# ;; (global-set-key (kbd "C-c k") 'kill-this-buffer)
# ;;(global-set-key (kbd "C-c c") 'compile) compile avec make
# ;;(global-set-key (kbd "C-c g") 'gdb) lance le débogueur gdb

# ;; (load-library "iso-transl")		;Permet d'utiliser les accents circonflexe entre autres

# ;; ;; Auto Completion
# ;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/auto-complete")
# ;; (require 'auto-complete-config)
# ;; (add-to-list 'ac-dictionary-directories "/usr/share/emacs/site-lisp/auto-complete/ac-dict")
# ;; (ac-config-default)
 
# ;; ;; scroll one line at a time (less "jumpy" than defaults)
# ;; (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
# ;; (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
# ;; (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
# ;; (setq scroll-step 1) ;; keyboard scroll one line at a time
** LaTeX
   Custom classes latex
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/orgmode-config.el
   (add-to-list 'org-latex-classes
   '("keiothesis"
   "\\documentclass{keiothesis}"
   ;; ("\\part{%s}" . "\\part*{%s}")
   ("\\chapter{%s}" . "\\chapter*{%s}")
   ("\\section{%s}" . "\\section*{%s}")
   ("\\subsection{%s}" . "\\subsection*{%s}")
   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
   )
   #+END_SRC
** Custom templates
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/orgmode-config.el
     (add-to-list 'org-structure-template-alist
		  '("fig" "#+CAPTION: ?\n#+LABEL: fig:\n#+ATTR_LATEX: \n[[]]"))
   #+END_SRC
* Python
  :PROPERTIES:
  :CUSTOM_ID: python
  :END:
  Utiliser Elpy[fn:1]. Il faut installer les paquets python suivants.
  - jedi :: Autocompletion et analyse statique
  - flake8 :: Vérification du code
  - importmagic :: Imports automatiques
  - autopep8 :: Formattage automatique aux PEP8
  - yapf :: Formattage du code
  #+BEGIN_SRC python
  pip install --user jedi flake8 importmagic autopep8
  #+END_SRC
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/python-config.el
  (elpy-enable)
  #+END_SRC
  - Virtual environement setup
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/python-config.el
    (setenv "WORKON_HOME" "~/.anaconda3/envs")
    #+END_SRC
* Dired
  - Move to trash
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/dired-config.el
    (setq delete-by-moving-to-trash t)
    #+END_SRC
* Docview
  - Auto revert files in Docview
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/docview-config.el
    (add-hook 'doc-view-mode-hook 'auto-revert-mode)
    #+END_SRC
* Executables path
  - Add ruby gem (easy-jekyll) to ~exec-path~
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/path-config.el
    (setq exec-path (append exec-path '("/home/adam/.gem/ruby/2.6.0/bin")))
    #+END_SRC
* Blog
  - Easy-hugo configuration
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/path-config.el
    (setq easy-hugo-basedir "~/Personal/research-log/")
    #+END_SRC
* Init
  The content of the init.el file.
  This is at the end of this document so that all other .el files are created before trying to load them.
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
  (package-initialize)
  (load-file "~/.emacs.d/package-config.el")
  (load-file "~/.emacs.d/theme-config.el")
  (load-file "~/.emacs.d/display-config.el")
  (load-file "~/.emacs.d/edit-config.el")
  (load-file "~/.emacs.d/orgmode-config.el")
  (load-file "~/.emacs.d/windmove-config.el")
  (load-file "~/.emacs.d/python-config.el")
  (load-file "~/.emacs.d/dired-config.el")
  (load-file "~/.emacs.d/docview-config.el")
  (load-file "~/.emacs.d/path-config.el")
  #+END_SRC
* More
  More information on orgmode.
  - http://mescal.imag.fr/membres/arnaud.legrand/misc/init.php
  - https://www.emacswiki.org/emacs/OrgDotemacs
  - http://doc.norang.ca/org-mode.html
  - http://kychoi.org/blog/2014/07/09/Dotemacs-In-Org
* Footnotes

[fn:3] https://zzamboni.org/post/beautifying-org-mode-in-emacs/

[fn:2] https://addons.mozilla.org/en-US/firefox/addon/edit-with-emacs1/?src=search

[fn:1] https://github.com/jorgenschaefer/elpy

[fn:fonts] http://www.xiangji.me/2015/07/13/a-few-of-my-org-mode-customizations/


  
